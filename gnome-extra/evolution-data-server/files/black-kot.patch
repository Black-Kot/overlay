diff --git a/addressbook/backends/google/e-book-backend-google.c b/addressbook/backends/google/e-book-backend-google.c
index 2498f67..2a5736c 100644
--- a/addressbook/backends/google/e-book-backend-google.c
+++ b/addressbook/backends/google/e-book-backend-google.c
@@ -723,15 +723,6 @@ e_book_backend_google_remove_contacts (EBookBackendSync *backend, EDataBook *boo
 		cache_remove_contact (E_BOOK_BACKEND (backend), uid);
 
 		/* Delete the contact from the server */
-		if (!gdata_service_delete_entry (GDATA_SERVICE (priv->service), entry, NULL, &error)) {
-			/* Only last error will be reported */
-			data_book_error_from_gdata_error (perror, error);
-			__debug__ ("Deleting contact %s failed: %s", uid, error->message);
-			g_error_free (error);
-		} else {
-			/* Success! */
-			*ids = g_list_append (*ids, g_strdup (uid));
-		}
 
 		g_object_unref (entry);
 	}
@@ -792,19 +783,6 @@ e_book_backend_google_modify_contact (EBookBackendSync *backend, EDataBook *book
 	g_free (xml);
 
 	/* Update the contact on the server */
-	#ifdef HAVE_GDATA_07
-	new_entry = gdata_service_update_entry (
-			GDATA_SERVICE (priv->service),
-			entry,
-			NULL, &error);
-	#else
-	new_entry = GDATA_ENTRY (
-		gdata_contacts_service_update_contact (
-			GDATA_CONTACTS_SERVICE (priv->service),
-			GDATA_CONTACTS_CONTACT (entry),
-			NULL, &error));
-	#endif
-	g_object_unref (entry);
 
 	if (!new_entry) {
 		data_book_error_from_gdata_error (perror, error);
@@ -1054,18 +1032,6 @@ e_book_backend_google_authenticate_user (EBookBackendSync *backend, EDataBook *b
 	g_signal_connect (priv->proxy, "changed", G_CALLBACK (proxy_settings_changed), backend);
 
 	/* Authenticate with the server */
-	if (!gdata_service_authenticate (priv->service, priv->username, password, NULL, &error)) {
-		g_object_unref (priv->service);
-		priv->service = NULL;
-		g_object_unref (priv->proxy);
-		priv->proxy = NULL;
-
-		data_book_error_from_gdata_error (perror, error);
-		__debug__ ("Authentication failed: %s", error->message);
-		g_error_free (error);
-
-		return;
-	}
 
 	/* Update the cache if neccessary */
 	cache_refresh_if_needed (E_BOOK_BACKEND (backend), &error);
@@ -1460,57 +1426,8 @@ data_book_error_from_gdata_error (GError **dest_err, GError *error)
 	/* only last error is used */
 	g_clear_error (dest_err);
 
-	if (error->domain == GDATA_AUTHENTICATION_ERROR) {
-		/* Authentication errors */
-		switch (error->code) {
-		case GDATA_AUTHENTICATION_ERROR_BAD_AUTHENTICATION:
-			g_propagate_error (dest_err, EDB_ERROR (AUTHENTICATION_FAILED));
-			return;
-		case GDATA_AUTHENTICATION_ERROR_NOT_VERIFIED:
-		case GDATA_AUTHENTICATION_ERROR_TERMS_NOT_AGREED:
-		case GDATA_AUTHENTICATION_ERROR_CAPTCHA_REQUIRED:
-		case GDATA_AUTHENTICATION_ERROR_ACCOUNT_DELETED:
-		case GDATA_AUTHENTICATION_ERROR_ACCOUNT_DISABLED:
-			g_propagate_error (dest_err, EDB_ERROR (PERMISSION_DENIED));
-			return;
-		case GDATA_AUTHENTICATION_ERROR_SERVICE_DISABLED:
-			g_propagate_error (dest_err, EDB_ERROR (REPOSITORY_OFFLINE));
-			return;
-		default:
-			break;
-		}
-	} else if (error->domain == GDATA_SERVICE_ERROR) {
-		/* General service errors */
-		switch (error->code) {
-		case GDATA_SERVICE_ERROR_UNAVAILABLE:
-			g_propagate_error (dest_err, EDB_ERROR (REPOSITORY_OFFLINE));
-			return;
-		case GDATA_SERVICE_ERROR_PROTOCOL_ERROR:
-			g_propagate_error (dest_err, e_data_book_create_error (E_DATA_BOOK_STATUS_INVALID_QUERY, error->message));
-			return;
-		case GDATA_SERVICE_ERROR_ENTRY_ALREADY_INSERTED:
-			g_propagate_error (dest_err, EDB_ERROR (CONTACTID_ALREADY_EXISTS));
-			return;
-		case GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED:
-			g_propagate_error (dest_err, EDB_ERROR (AUTHENTICATION_REQUIRED));
-			return;
-		case GDATA_SERVICE_ERROR_NOT_FOUND:
-			g_propagate_error (dest_err, EDB_ERROR (CONTACT_NOT_FOUND));
-			return;
-		case GDATA_SERVICE_ERROR_CONFLICT:
-			g_propagate_error (dest_err, EDB_ERROR (CONTACTID_ALREADY_EXISTS));
-			return;
-		case GDATA_SERVICE_ERROR_FORBIDDEN:
-			g_propagate_error (dest_err, EDB_ERROR (QUERY_REFUSED));
-			return;
-		case GDATA_SERVICE_ERROR_BAD_QUERY_PARAMETER:
-			g_propagate_error (dest_err, e_data_book_create_error (E_DATA_BOOK_STATUS_INVALID_QUERY, error->message));
-			return;
-		default:
-			break;
-		}
-	}
 
+			g_propagate_error (dest_err, EDB_ERROR (REPOSITORY_OFFLINE));
 	g_propagate_error (dest_err, e_data_book_create_error (E_DATA_BOOK_STATUS_OTHER_ERROR, error->message));
 }
 
